1. Encapsulation (hiding implementation):
	- wraps the code and data together into a single unit
	- flexibility and extensibility of the code
	- reduces complexity
	- allows validation and data binding
	- structural changes remain local

	The different fields of the class must be private. We use getters (accessor) and setters (mutator) for data access.
	Getters are public, and Setters can be public/private.

	"this" - reference to the current object (the current instance of a class). This can also invoke current class methods or constructors.

	Access Modifiers:
		- Private - can be accessed only within the declared class itself (interfaces and classes cannot be private). 
		- Public – visible to everyone  
		- Protected – accessible by members who inherit or from the same package (cannot be applied to interfaces and classes). It prevents nonrelated classes from using it
		- Package Private (default - when no access modifier is declared) – available to any other class in the same package

	Validation is done in:
		- setters (mutators) (usually in the setters)
		- constructors (rarely)
	
		When doing validation, it is better to throw exceptions, rather than printing them out on the console.

		When validating inside the constructor, it is best to use private setters inside the constructor:
			- guarantees the valid state of the object in its creation
			- guarantees valid state for public setters
	
	Mutable and Immutable Objects (Collections.unmodifiable()):
		- Mutable (the contents of the instance can be altered/changed)
		- Immutable (the contents of the instance cannot be altered/changed)

		In this case, when we use the getter, we can access the other List<> functionalities, such as (add, remove, etc.), which breaks the encapsulation.
		That's why we use the Collections.unmodifiable(), which still lets us use these functionalities, but it doesn't have a direct implementation and throws an exception.
			
	Keyword final:
		final class - cannot be extended (inherited)
		final method - cannot be overridden (changed)
		final fields and variables - cannot be changed once they are set ('=' no longer works, can't assign a new value to it)

	Constructors: 
		These are methods used to instantiate an object. And is used with the keyword "new".

2. Inheritance - minimize duplicate code (keyword "extends"):

	There should not be too great an inheritance streak (too long inheritance, a lot of grandkids) 

	- Base class (superclass, parent class) - the base class gives its members (fields, properties, methods) to the child (the class that inherits the parent class). 
	- Subclass (child class) - the child points to the parent class. The child always knows who it inherits. The child gets all the (fields, properties, and methods) of the parent class (inherits absolutely everything!). 

	Keyword 'super' - calls the super constructor (the constructor of the base class) 

	Multiple Inheritance – a class can inherit only one class (unlike interfaces, where a class can inherit multiple interfaces) 

 	Shadowing Variable -  

	When overriding a method, we should keep the method signature from the parent class. Method signature contains (@override - annotation): 
		- Method name 
		- Parameters types (int, string) - the name of the parameters could be different, but types should be the same 
	
	Types of code reuse:
		- Extension (inheritance)
		- Composition - using classes to define classes (Laptop -> (Monitor, Touchpad, Keyboard) we are reusing the monitor, touchpad, and keyboard classes to define the laptop class).
		- Delegation (Laptop (Monitor) -> increaseBrightness) - the laptop class delegates to the monitor class to increase its brightness

	Hierarchy in Java Structures: 
		1. Iterable 
		2. Collection 
		3. Queue, Set, List 
			- Queue – PriorityQueue, Dequeue - ArrayDequeue 
			- List – ArrayList, LinkedList, Vector, Stack 
			- Set -  LinkedHashet, HashSet, SortedSet - TreeSet 


3. Abstraction and Interfaces: 
	Interface - does not contain any implementation of the methods, fields, and properties. Interfaces are always public.

	Abstract class - in the abstract classes we can define what is the percentage of abstraction. Usually, it is a good solution if we need classes with some percentage of abstraction different than 0% (normal class) and 100% (interface). Abstract classes are like normal classes, but they cannot be instantiated and can contain abstract methods. It is usually used as a middle layer of an interface and class. Abstract classes cannot be instantiated. 
	Abstract classes access modifiers can be:
		- public
		- protected
		- default (package private)

	- Interface extends Interface
	- Class implements Interfaces
	- Class extends Class

	Static is not used in instances (objects). It is loaded with the compilation of the program (it is not dynamic, it cannot change dynamically while the program is running) 
	Final – can't be changed, constant 

4. Polymorphism (Poly - Many, Morphe - Forms, Ability of a object to take many forms):

	Method Overloading – change in the signature of the method. Method Overloading is only for methods in the same context (class). It is not applicable when inheriting.  

	Constructors can be overloaded 
	Method overloading is done by changing: 
		- The number of parameters 
		- The type of the parameters 
		- The sequence of the parameters 

	Method Overriding – it is done only in the children class.  
		- Argument list must be the same as the parent method. 
		- Also the return type must be the same as well. 
		- Access modifiers cannot be more restrictive than the parent one. 
		- Private, static and final methods cannot be overriden. 

	Keyword "Instanceof" - checks if object is an instance of specific class. It is not a good practice to use it, it is best to just change the reference type.

5. SOLID (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion):

	S – Single Responsibility – class should have one responsibility (kinda like the swiss knife, it is bad idea for a class to be able to do a lot of stuff, it is best for the class to do only one thing). 
		- Reduces dependency complexion 
		- Each additional responsibility is an axis to change the class 
		- Classes can still have multiple methods (as long as these methods are relevant to the class purpouse) 
	O – Open/Closed - open for extension, but closed for modification (in short, we have to be able to extend the code (add new feature by extending it), instead of having to modify the current code). 
	L – Liskov Substitution – objects should be replaceable by instances of their subtypes without altering the correctness of the program (to be able to do easy polymorphism) 
	I – Interface Segregation – many specific interfaces are better than one general interface 
	D – Dependency Inversion – one should depend on abstraction, not on concretions 
